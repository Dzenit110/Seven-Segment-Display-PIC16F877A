;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     E:\Mirkoracunari\Sedmo segmentni displej sa Up i Down\Sedmosegmentni_display.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.5.2.1
//**  Date:          Sunday, November 26, 2017 19:50:33
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_DOWN;
MX_UINT8 FCV_UP;
MX_UINT8 FCV_BROJAC;




//led7seg(0): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = Segment Port letter
c = Common Port letter
d = Segment Pin 0
e = Segment Pin 1
f = Segment Pin 2
g = Segment Pin 3
h = Segment Pin 4
i = Segment Pin 5
j = Segment Pin 6
k = Segment Pin 7
l = Common Pin
m = Display Type 0=Common Cathode, 1=Common Anode
******************************/

#define SEVENSEG1_1_SEG_PORT		portb
#define SEVENSEG1_1_SEG_TRIS		trisb
#define SEVENSEG1_1_COM_PORT		porta
#define SEVENSEG1_1_COM_TRIS		trisa
#define SEVENSEG1_1_SEG_PIN0		0
#define SEVENSEG1_1_SEG_PIN1		1
#define SEVENSEG1_1_SEG_PIN2		2
#define SEVENSEG1_1_SEG_PIN3		3
#define SEVENSEG1_1_SEG_PIN4		4
#define SEVENSEG1_1_SEG_PIN5		5
#define SEVENSEG1_1_SEG_PIN6		6
#define SEVENSEG1_1_SEG_PIN7		7
#define SEVENSEG1_1_COM_PIN		3
#define SEVENSEG1_1_COM_TYPE		0

#ifndef SEVENSEG1_1_ARRAY
 #define SEVENSEG1_1_ARRAY
 ROMARRAY_S SEVENSEG1_1_SegmentArray ROMARRAY_E = {192, 249, 164, 176, 153, 146, 130, 248, 128, 152};		//Create ROM pattern array for the display
0140  3000  	MOVLW 0x00
0141  00C5  	MOVWF gbl_SEVENSEG1_1_SegmentArray

#endif




//led7seg(0): //Macro function declarations

void FCD_led7seg0_ShowDigit(MX_UINT8 Value, MX_UINT8 DecimalPoint);
void FCD_led7seg0_ClearDigit();



//led7seg(0): //Macro implementations


void FCD_led7seg0_ShowDigit(MX_UINT8 Value, MX_UINT8 DecimalPoint)

{
	
		MX_UINT8 cSegmentValue = SEVENSEG1_1_SegmentArray[Value % 10];
0037  0845  	MOVF gbl_SEVENSEG1_1_SegmentArray, W
0038  00CB  	MOVWF __rom_get_00000_arg_objNumb
0039  0846  	MOVF FCD_led7se_00051_arg_Value, W
003A  00C9  	MOVWF __rem_8_8_00000_arg_a
003B  300A  	MOVLW 0x0A
003C  00CA  	MOVWF __rem_8_8_00000_arg_b
003D  2026  	CALL __rem_8_8_00000
003E  084F  	MOVF CompTempVarRet218, W
003F  00CC  	MOVWF __rom_get_00000_arg_idx
0040  2010  	CALL __rom_get_00000
0041  00C8  	MOVWF FCD_led7se_00051_1_cSegmentValue


		if (DecimalPoint)
0042  08C7  	MOVF FCD_led7se_00051_arg_Decim_00052, F
0043  118A  	BCF PCLATH,3
0044  120A  	BCF PCLATH,4
0045  1903  	BTFSC STATUS,Z
0046  284A  	GOTO	label4
004A        label4

			cSegmentValue = cSegmentValue & 0x7F;			//Clear decimal point bit
0047  307F  	MOVLW 0x7F
0048  0548  	ANDWF FCD_led7se_00051_1_cSegmentValue, W
0049  00C8  	MOVWF FCD_led7se_00051_1_cSegmentValue


		//display the digit
	    #if (SEVENSEG1_1_COM_TYPE == 1)						//Common Anode - Low = on, High = off

			if (cSegmentValue & 0x01)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN0);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN0);
			}

			if (cSegmentValue & 0x02)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN1);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN1);
			}

			if (cSegmentValue & 0x04)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN2);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN2);
			}

			if (cSegmentValue & 0x08)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN3);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN3);
			}

			if (cSegmentValue & 0x10)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN4);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN4);
			}

			if (cSegmentValue & 0x20)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN5);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN5);
			}

			if (cSegmentValue & 0x40)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN6);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN6);
			}

			if (cSegmentValue & 0x80)
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN7);
			}
			else
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN7);
			}

			FC_CAL_Bit_High_DDR(SEVENSEG1_1_COM_PORT, SEVENSEG1_1_COM_TRIS, SEVENSEG1_1_COM_PIN);

		#else												//Common Cathode - Low = off, High = on

			if (cSegmentValue & 0x01)
004A  1C48  	BTFSS FCD_led7se_00051_1_cSegmentValue,0
004B  2851  	GOTO	label5
0051        label5

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN0);
004C  1683  	BSF STATUS, RP0
004D  1006  	BCF gbl_trisb,0
004E  1283  	BCF STATUS, RP0
004F  1006  	BCF gbl_portb,0

			}
			else
0050  2855  	GOTO	label6
0055        label6

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN0);
0051  1683  	BSF STATUS, RP0
0052  1006  	BCF gbl_trisb,0
0053  1283  	BCF STATUS, RP0
0054  1406  	BSF gbl_portb,0

			}

			if (cSegmentValue & 0x02)
0055  1CC8  	BTFSS FCD_led7se_00051_1_cSegmentValue,1
0056  285C  	GOTO	label7
005C        label7

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN1);
0057  1683  	BSF STATUS, RP0
0058  1086  	BCF gbl_trisb,1
0059  1283  	BCF STATUS, RP0
005A  1086  	BCF gbl_portb,1

			}
			else
005B  2860  	GOTO	label8
0060        label8

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN1);
005C  1683  	BSF STATUS, RP0
005D  1086  	BCF gbl_trisb,1
005E  1283  	BCF STATUS, RP0
005F  1486  	BSF gbl_portb,1

			}

			if (cSegmentValue & 0x04)
0060  1D48  	BTFSS FCD_led7se_00051_1_cSegmentValue,2
0061  2867  	GOTO	label9
0067        label9

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN2);
0062  1683  	BSF STATUS, RP0
0063  1106  	BCF gbl_trisb,2
0064  1283  	BCF STATUS, RP0
0065  1106  	BCF gbl_portb,2

			}
			else
0066  286B  	GOTO	label10
006B        label10

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN2);
0067  1683  	BSF STATUS, RP0
0068  1106  	BCF gbl_trisb,2
0069  1283  	BCF STATUS, RP0
006A  1506  	BSF gbl_portb,2

			}

			if (cSegmentValue & 0x08)
006B  1DC8  	BTFSS FCD_led7se_00051_1_cSegmentValue,3
006C  2872  	GOTO	label11
0072        label11

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN3);
006D  1683  	BSF STATUS, RP0
006E  1186  	BCF gbl_trisb,3
006F  1283  	BCF STATUS, RP0
0070  1186  	BCF gbl_portb,3

			}
			else
0071  2876  	GOTO	label12
0076        label12

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN3);
0072  1683  	BSF STATUS, RP0
0073  1186  	BCF gbl_trisb,3
0074  1283  	BCF STATUS, RP0
0075  1586  	BSF gbl_portb,3

			}

			if (cSegmentValue & 0x10)
0076  1E48  	BTFSS FCD_led7se_00051_1_cSegmentValue,4
0077  287D  	GOTO	label13
007D        label13

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN4);
0078  1683  	BSF STATUS, RP0
0079  1206  	BCF gbl_trisb,4
007A  1283  	BCF STATUS, RP0
007B  1206  	BCF gbl_portb,4

			}
			else
007C  2881  	GOTO	label14
0081        label14

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN4);
007D  1683  	BSF STATUS, RP0
007E  1206  	BCF gbl_trisb,4
007F  1283  	BCF STATUS, RP0
0080  1606  	BSF gbl_portb,4

			}

			if (cSegmentValue & 0x20)
0081  1EC8  	BTFSS FCD_led7se_00051_1_cSegmentValue,5
0082  2888  	GOTO	label15
0088        label15

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN5);
0083  1683  	BSF STATUS, RP0
0084  1286  	BCF gbl_trisb,5
0085  1283  	BCF STATUS, RP0
0086  1286  	BCF gbl_portb,5

			}
			else
0087  288C  	GOTO	label16
008C        label16

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN5);
0088  1683  	BSF STATUS, RP0
0089  1286  	BCF gbl_trisb,5
008A  1283  	BCF STATUS, RP0
008B  1686  	BSF gbl_portb,5

			}

			if (cSegmentValue & 0x40)
008C  1F48  	BTFSS FCD_led7se_00051_1_cSegmentValue,6
008D  2893  	GOTO	label17
0093        label17

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN6);
008E  1683  	BSF STATUS, RP0
008F  1306  	BCF gbl_trisb,6
0090  1283  	BCF STATUS, RP0
0091  1306  	BCF gbl_portb,6

			}
			else
0092  2897  	GOTO	label18
0097        label18

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN6);
0093  1683  	BSF STATUS, RP0
0094  1306  	BCF gbl_trisb,6
0095  1283  	BCF STATUS, RP0
0096  1706  	BSF gbl_portb,6

			}

			if (cSegmentValue & 0x80)
0097  1FC8  	BTFSS FCD_led7se_00051_1_cSegmentValue,7
0098  289E  	GOTO	label19
009E        label19

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN7);
0099  1683  	BSF STATUS, RP0
009A  1386  	BCF gbl_trisb,7
009B  1283  	BCF STATUS, RP0
009C  1386  	BCF gbl_portb,7

			}
			else
009D  28A2  	GOTO	label20
00A2        label20

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_1_SEG_PORT, SEVENSEG1_1_SEG_TRIS, SEVENSEG1_1_SEG_PIN7);
009E  1683  	BSF STATUS, RP0
009F  1386  	BCF gbl_trisb,7
00A0  1283  	BCF STATUS, RP0
00A1  1786  	BSF gbl_portb,7

			}

			FC_CAL_Bit_Low_DDR(SEVENSEG1_1_COM_PORT, SEVENSEG1_1_COM_TRIS, SEVENSEG1_1_COM_PIN);
00A2  1683  	BSF STATUS, RP0
00A3  1185  	BCF gbl_trisa,3
00A4  1283  	BCF STATUS, RP0
00A5  1185  	BCF gbl_porta,3


		#endif

}
00A6  0008  	RETURN


void FCD_led7seg0_ClearDigit()
{
	
		#if (SEVENSEG1_1_COM_TYPE == 1)
			FC_CAL_Bit_Low_DDR(SEVENSEG1_1_COM_PORT, SEVENSEG1_1_COM_TRIS, SEVENSEG1_1_COM_PIN);		//common anode
		#else
			FC_CAL_Bit_High_DDR(SEVENSEG1_1_COM_PORT, SEVENSEG1_1_COM_TRIS, SEVENSEG1_1_COM_PIN);		//common cathode
		#endif

}

#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations

//U ovom zadatku cemo prikazati rad sedmosegmentnog displaya sa mogucnosti mjenjanja vrijednosti cifre tasterom


void main()

{
	//Initialization
	adcon1 = 0x07;
00A7  3007  	MOVLW 0x07
00A8  1683  	BSF STATUS, RP0
00A9  1303  	BCF STATUS, RP1
00AA  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
00AB  30C0  	MOVLW 0xC0
00AC  0081  	MOVWF gbl_option_reg



	//Definisemo imena varijabli njihove pocetne vrijednosti i njihove
	//Calculation:
	//  Brojac = 5
	//  Up = 1
	//  Down = 1
	FCV_BROJAC = 5;
00AD  3005  	MOVLW 0x05
00AE  1283  	BCF STATUS, RP0
00AF  00C4  	MOVWF gbl_FCV_BROJAC

	FCV_UP = 1;
00B0  3001  	MOVLW 0x01
00B1  00C3  	MOVWF gbl_FCV_UP

	FCV_DOWN = 1;
00B2  00C2  	MOVWF gbl_FCV_DOWN


	//Prikaz vrijednosti iz varijable Brojac
	//Call Component Macro: ShowDigit(Brojac, 0)
	FCD_led7seg0_ShowDigit(FCV_BROJAC, 0);
00B3  0844  	MOVF gbl_FCV_BROJAC, W
00B4  00C6  	MOVWF FCD_led7se_00051_arg_Value
00B5  01C7  	CLRF FCD_led7se_00051_arg_Decim_00052
00B6  2037  	CALL FCD_led7se_00051


	//Beskonacna petlja jer zelimo da nam displej radi pomocu tastera 
	//Loop: While 1
	while (1)
00B7        label21

	{

		//Taster Up je upolozaju  1
		//Input: A1 -> Up
		trisa = trisa | 0x02;
00B7  3002  	MOVLW 0x02
00B8  1683  	BSF STATUS, RP0
00B9  0405  	IORWF gbl_trisa, W
00BA  0085  	MOVWF gbl_trisa

		FCV_UP = ((porta & 0x02) == 0x02);
00BB  3002  	MOVLW 0x02
00BC  1283  	BCF STATUS, RP0
00BD  0505  	ANDWF gbl_porta, W
00BE  00C6  	MOVWF CompTempVar2194
00BF  01C3  	CLRF gbl_FCV_UP
00C0  3002  	MOVLW 0x02
00C1  0246  	SUBWF CompTempVar2194, W
00C2  1903  	BTFSC STATUS,Z
00C3  0AC3  	INCF gbl_FCV_UP, F


		//Comment:
		//Donosi odluku u odnosu na vrijednost varijable Up

		//Decision
		//Decision: Up = 0?
		if (FCV_UP == 0)
00C4  08C3  	MOVF gbl_FCV_UP, F
00C5  1D03  	BTFSS STATUS,Z
00C6  28EA  	GOTO	label24

		{

			//Povecanje vrijednosti varijable za jedan
			//Calculation:
			//  Brojac = Brojac + 1
			FCV_BROJAC = FCV_BROJAC + 1;
00C7  0A44  	INCF gbl_FCV_BROJAC, W
00C8  00C4  	MOVWF gbl_FCV_BROJAC


			//Prikaz varijable Brojac na displeju
			//Call Component Macro: ShowDigit(Brojac, 0)
			FCD_led7seg0_ShowDigit(FCV_BROJAC, 0);
00C9  0844  	MOVF gbl_FCV_BROJAC, W
00CA  00C6  	MOVWF FCD_led7se_00051_arg_Value
00CB  01C7  	CLRF FCD_led7se_00051_arg_Decim_00052
00CC  2037  	CALL FCD_led7se_00051


			//Comment:
			//Ako je brojac veci od 9 vrijednost varijable brojac ce postaviti na 0
			//to nam ogranicava brojac da broji u opsego od 0 do 9 

			//Loop
			//Loop: While Brojac > 9
			while (FCV_BROJAC > 9)
00CD        label22
00CD  0844  	MOVF gbl_FCV_BROJAC, W
00CE  3C09  	SUBLW 0x09
00CF  1803  	BTFSC STATUS,C
00D0  28D7  	GOTO	label23
00D6  28CD  	GOTO	label22
00D7        label23
011A  2909  	GOTO	label26

			{

				//Definisem vrijednost varijable Brojac da je jednako nula
				//Calculation:
				//  Brojac = 0
				FCV_BROJAC = 0;
00D1  01C4  	CLRF gbl_FCV_BROJAC


				//Prikaz varijable Brojac na displeju
				//Call Component Macro: ShowDigit(Brojac, 0)
				FCD_led7seg0_ShowDigit(FCV_BROJAC, 0);
00D2  0844  	MOVF gbl_FCV_BROJAC, W
00D3  00C6  	MOVWF FCD_led7se_00051_arg_Value
00D4  01C7  	CLRF FCD_led7se_00051_arg_Decim_00052
00D5  2037  	CALL FCD_led7se_00051



			}

			//Ako je taster Up=0
			//Loop: While Up = 0
			while (FCV_UP == 0)
00D7  08C3  	MOVF gbl_FCV_UP, F
00D8  1D03  	BTFSS STATUS,Z
00D9  28EA  	GOTO	label24
00E9  28D7  	GOTO	label23
00EA        label24

			{

				//Polozaj tastera je u stanju varijable Up
				//Input: A1 -> Up
				trisa = trisa | 0x02;
00DA  3002  	MOVLW 0x02
00DB  1683  	BSF STATUS, RP0
00DC  0405  	IORWF gbl_trisa, W
00DD  0085  	MOVWF gbl_trisa

				FCV_UP = ((porta & 0x02) == 0x02);
00DE  3002  	MOVLW 0x02
00DF  1283  	BCF STATUS, RP0
00E0  0505  	ANDWF gbl_porta, W
00E1  00C6  	MOVWF CompTempVar2196
00E2  01C7  	CLRF CompTempVar2197
00E3  3002  	MOVLW 0x02
00E4  0246  	SUBWF CompTempVar2196, W
00E5  1903  	BTFSC STATUS,Z
00E6  0AC7  	INCF CompTempVar2197, F
00E7  0847  	MOVF CompTempVar2197, W
00E8  00C3  	MOVWF gbl_FCV_UP



			}

			//Comment:
			//Ako je Up = 0  onda ce proces zadrzati u petlji i postaviti Up = 1

		// } else {

		}

		//Taster Down je u polozaju varijable Down 1
		//Input: A0 -> Down
		trisa = trisa | 0x01;
00EA  3001  	MOVLW 0x01
00EB  1683  	BSF STATUS, RP0
00EC  0405  	IORWF gbl_trisa, W
00ED  0085  	MOVWF gbl_trisa

		FCV_DOWN = ((porta & 0x01) == 0x01);
00EE  3001  	MOVLW 0x01
00EF  1283  	BCF STATUS, RP0
00F0  0505  	ANDWF gbl_porta, W
00F1  00C6  	MOVWF CompTempVar2198
00F2  01C2  	CLRF gbl_FCV_DOWN
00F3  0346  	DECF CompTempVar2198, W
00F4  1903  	BTFSC STATUS,Z
00F5  0AC2  	INCF gbl_FCV_DOWN, F


		//Donosi odluku u odnosu na varijablu Down
		//Decision: Down = 0?
		if (FCV_DOWN == 0)
00F6  08C2  	MOVF gbl_FCV_DOWN, F
00F7  1D03  	BTFSS STATUS,Z
00F8  28B7  	GOTO	label21

		{

			//Vrijednost na displayu se umanjuje za jedan
			//Calculation:
			//  Brojac = Brojac - 1
			FCV_BROJAC = FCV_BROJAC - 1;
00F9  0344  	DECF gbl_FCV_BROJAC, W
00FA  00C4  	MOVWF gbl_FCV_BROJAC


			//Prikaz vrijednosti varijable Brojac na displeju
			//Call Component Macro: ShowDigit(Brojac, 0)
			FCD_led7seg0_ShowDigit(FCV_BROJAC, 0);
00FB  0844  	MOVF gbl_FCV_BROJAC, W
00FC  00C6  	MOVWF FCD_led7se_00051_arg_Value
00FD  01C7  	CLRF FCD_led7se_00051_arg_Decim_00052
00FE  2037  	CALL FCD_led7se_00051


			//Comment:
			//Ako je brojac = 0 onda ce varijablu brojac postaviti na 9
			//to nam onemogucava da brojac prikazuje brojeve manje od 0

			//Loop
			//Loop: While Brojac = 0
			while (FCV_BROJAC == 0)
00FF        label25
00FF  08C4  	MOVF gbl_FCV_BROJAC, F
0100  1D03  	BTFSS STATUS,Z
0101  2909  	GOTO	label26
0108  28FF  	GOTO	label25
0109        label26

			{

				//Definisemo vrijednost varijable Brojac
				//Calculation:
				//  Brojac = 9
				FCV_BROJAC = 9;
0102  3009  	MOVLW 0x09
0103  00C4  	MOVWF gbl_FCV_BROJAC


				//Prikaz vrijednosti varijable Brojac na displeju
				//Call Component Macro: ShowDigit(Brojac, 0)
				FCD_led7seg0_ShowDigit(FCV_BROJAC, 0);
0104  0844  	MOVF gbl_FCV_BROJAC, W
0105  00C6  	MOVWF FCD_led7se_00051_arg_Value
0106  01C7  	CLRF FCD_led7se_00051_arg_Decim_00052
0107  2037  	CALL FCD_led7se_00051



			}

			//
			//Loop: While Down = 0
			while (FCV_DOWN == 0)
0109  08C2  	MOVF gbl_FCV_DOWN, F
010A  1D03  	BTFSS STATUS,Z
010B  28B7  	GOTO	label21

			{

				//Input
				//Input: A0 -> Down
				trisa = trisa | 0x01;
010C  3001  	MOVLW 0x01
010D  1683  	BSF STATUS, RP0
010E  0405  	IORWF gbl_trisa, W
010F  0085  	MOVWF gbl_trisa

				FCV_DOWN = ((porta & 0x01) == 0x01);
0110  3001  	MOVLW 0x01
0111  1283  	BCF STATUS, RP0
0112  0505  	ANDWF gbl_porta, W
0113  00C6  	MOVWF CompTempVar2200
0114  01C7  	CLRF CompTempVar2201
0115  0346  	DECF CompTempVar2200, W
0116  1903  	BTFSC STATUS,Z
0117  0AC7  	INCF CompTempVar2201, F
0118  0847  	MOVF CompTempVar2201, W
0119  00C2  	MOVWF gbl_FCV_DOWN



			}

			//Comment:
			//Ako je Down = 0 onda ce proces zadrzati u petlji i postaviti  Down = 1

		// } else {

		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0145  1283  	BCF STATUS, RP0
0146  1303  	BCF STATUS, RP1
0147  0E36  	SWAPF Int1BContext+D'2', W
0148  0084  	MOVWF FSR
0149  0E35  	SWAPF Int1BContext+D'1', W
014A  008A  	MOVWF PCLATH
014B  0E34  	SWAPF Int1BContext, W
014C  0083  	MOVWF STATUS
014D  0EFF  	SWAPF Int1Context, F
014E  0E7F  	SWAPF Int1Context, W
014F  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  291B  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2945  	GOTO	interrupt
0010        __rom_get_00000
0010        ; { __rom_get ; function begin
0010  084C  	MOVF __rom_get_00000_arg_idx, W
0011  00CD  	MOVWF __rom_get_00000_1_romAddr
0012  3000  	MOVLW	HIGH( label1 )
0013  00CE  	MOVWF __rom_get_00000_1_romAddr+D'1'
0014  301C  	MOVLW	LOW( label1 )
0015  07CD  	ADDWF __rom_get_00000_1_romAddr, F
0016  1803  	BTFSC STATUS,C
0017  0ACE  	INCF __rom_get_00000_1_romAddr+D'1', F
0018  084E  	MOVF __rom_get_00000_1_romAddr+D'1', W
0019  008A  	MOVWF PCLATH
001A  084D  	MOVF __rom_get_00000_1_romAddr, W
001B  0082  	MOVWF PCL
001C        label1
001C  34C0  	RETLW 0xC0
001D  34F9  	RETLW 0xF9
001E  34A4  	RETLW 0xA4
001F  34B0  	RETLW 0xB0
0020  3499  	RETLW 0x99
0021  3492  	RETLW 0x92
0022  3482  	RETLW 0x82
0023  34F8  	RETLW 0xF8
0024  3480  	RETLW 0x80
0025  3498  	RETLW 0x98
0026        ; } __rom_get function end

0026        __rem_8_8_00000
0026        ; { __rem_8_8 ; function begin
0026  01CF  	CLRF CompTempVarRet218
0027  01CD  	CLRF __rem_8_8_00000_1_c
0028  01CE  	CLRF __rem_8_8_00000_1_i
0029        label2
0029  19CE  	BTFSC __rem_8_8_00000_1_i,3
002A  0008  	RETURN
002B  1003  	BCF STATUS,C
002C  0DCD  	RLF __rem_8_8_00000_1_c, F
002D  0DC9  	RLF __rem_8_8_00000_arg_a, F
002E  0DCF  	RLF CompTempVarRet218, F
002F  084A  	MOVF __rem_8_8_00000_arg_b, W
0030  024F  	SUBWF CompTempVarRet218, W
0031  1C03  	BTFSS STATUS,C
0032  2835  	GOTO	label3
0033  00CF  	MOVWF CompTempVarRet218
0034  144D  	BSF __rem_8_8_00000_1_c,0
0035        label3
0035  0ACE  	INCF __rem_8_8_00000_1_i, F
0036  2829  	GOTO	label2
0037        ; } __rem_8_8 function end


011B        _startup
011B  30D5  	MOVLW 0xD5
011C  1283  	BCF STATUS, RP0
011D  1303  	BCF STATUS, RP1
011E  00A0  	MOVWF gbl_14_LSR
011F  30C4  	MOVLW 0xC4
0120  00A1  	MOVWF gbl_14_LSR+D'1'
0121  30BB  	MOVLW 0xBB
0122  00A2  	MOVWF gbl_14_LSR+D'2'
0123  30DC  	MOVLW 0xDC
0124  00A3  	MOVWF gbl_14_LSR+D'3'
0125  01A4  	CLRF gbl_15_gbl_aSig
0126  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0127  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0128  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0129  01A8  	CLRF gbl_15_gbl_bSig
012A  01A9  	CLRF gbl_15_gbl_bSig+D'1'
012B  01AA  	CLRF gbl_15_gbl_bSig+D'2'
012C  01AB  	CLRF gbl_15_gbl_bSig+D'3'
012D  01AC  	CLRF gbl_15_gbl_zSig
012E  01AD  	CLRF gbl_15_gbl_zSig+D'1'
012F  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0130  01AF  	CLRF gbl_15_gbl_zSig+D'3'
0131  01BC  	CLRF gbl_15_gbl_aExp
0132  01BD  	CLRF gbl_15_gbl_bExp
0133  01B7  	CLRF gbl_15_gbl_zExp
0134  01B8  	CLRF gbl_15_gbl_zExp+D'1'
0135  01BE  	CLRF gbl_15_gbl_aSign
0136  01BF  	CLRF gbl_15_gbl_bSign
0137  01C0  	CLRF gbl_15_gbl_zSign
0138  01C1  	CLRF gbl_15_gbl_zSigZero
0139  01B0  	CLRF gbl_15_gbl_ret
013A  01B1  	CLRF gbl_15_gbl_ret+D'1'
013B  01B2  	CLRF gbl_15_gbl_ret+D'2'
013C  01B3  	CLRF gbl_15_gbl_ret+D'3'
013D  01BA  	CLRF gbl_float_rounding_mode
013E  01BB  	CLRF gbl_float_exception_flags
013F  01B9  	CLRF gbl_float_detect_tininess

0142  118A  	BCF PCLATH,3
0143  120A  	BCF PCLATH,4
0144  28A7  	GOTO	main

2007  3F7A  	DW 0x3F7A
